# Generated by Django 3.2.7 on 2022-07-11 18:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(blank=True, db_index=True, max_length=64, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('deleted_by_user', models.BooleanField(blank=True, default=False)),
                ('user_id', models.CharField(max_length=64)),
                ('user_agent', models.CharField(blank=True, max_length=1024)),
                ('prolific_pid', models.CharField(blank=True, max_length=64)),
                ('study_id', models.CharField(blank=True, max_length=64)),
                ('experiment_id', models.CharField(blank=True, max_length=64)),
                ('session_id', models.CharField(blank=True, max_length=64)),
                ('wordle_play_frequency', models.CharField(max_length=64)),
                ('native_english', models.BooleanField(blank=True)),
                ('primed_emotion', models.CharField(max_length=64)),
                ('has_enhanced_feedback', models.BooleanField(blank=True)),
                ('emotionprime_1', models.TextField()),
                ('emotionprime_2', models.TextField()),
                ('presurvey_time', models.DateTimeField()),
                ('presurvey_events', models.JSONField(blank=True, default=dict, null=True)),
                ('end_arousal', models.CharField(blank=True, max_length=64)),
                ('end_valence', models.CharField(blank=True, max_length=64)),
                ('baseballcost', models.CharField(blank=True, max_length=64)),
                ('widgettime', models.CharField(blank=True, max_length=64)),
                ('lakedays', models.CharField(blank=True, max_length=64)),
                ('postsurvey_time', models.DateTimeField(blank=True, null=True)),
                ('postsurvey_events', models.JSONField(blank=True, default=dict, null=True)),
                ('did_start_bonus_rounds', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoundCompleteEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('guesses', models.JSONField()),
                ('feedback_log', models.JSONField()),
                ('guess_count', models.IntegerField()),
                ('round_index', models.PositiveIntegerField()),
                ('solution', models.CharField(max_length=64)),
                ('did_win', models.BooleanField(blank=True)),
                ('was_bonus_round', models.BooleanField(blank=True)),
                ('remote_timestamp', models.DateTimeField()),
                ('server_time', models.DateTimeField()),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='wordlelab.participant')),
            ],
        ),
        migrations.CreateModel(
            name='GuessEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('guess', models.CharField(max_length=64)),
                ('guesses', models.JSONField()),
                ('guess_index', models.PositiveIntegerField()),
                ('round_index', models.PositiveIntegerField()),
                ('was_valid', models.BooleanField(blank=True)),
                ('solution', models.CharField(max_length=64)),
                ('remote_timestamp', models.DateTimeField()),
                ('server_time', models.DateTimeField()),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guesses', to='wordlelab.participant')),
            ],
        ),
        migrations.CreateModel(
            name='WordleLabAdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
